{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91809\\\\Desktop\\\\vivek9patel.github.io-master\\\\vivek9patel.github.io-master\\\\src\\\\components\\\\ubuntu.js\";\nimport React, { Component } from \"react\";\nimport BootingScreen from \"./screen/booting_screen\";\nimport Desktop from \"./screen/desktop\";\nimport LockScreen from \"./screen/lock_screen\";\nimport Navbar from \"./screen/navbar\";\nimport ReactGA from 'react-ga';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Ubuntu extends Component {\n  constructor() {\n    super();\n\n    this.setTimeOutBootScreen = () => {\n      setTimeout(() => {\n        this.setState({\n          booting_screen: false\n        });\n      }, 2000);\n    };\n\n    this.getLocalData = () => {\n      // Get Previously selected Background Image\n      let bg_image_name = localStorage.getItem(\"bg-image\");\n\n      if (bg_image_name !== null && bg_image_name !== undefined) {\n        this.setState({\n          bg_image_name\n        });\n      }\n\n      let booting_screen = localStorage.getItem(\"booting_screen\");\n\n      if (booting_screen !== null && booting_screen !== undefined) {\n        // user has visited site before\n        this.setState({\n          booting_screen: false\n        });\n      } else {\n        // user is visiting site for the first time\n        localStorage.setItem(\"booting_screen\", false);\n        this.setTimeOutBootScreen();\n      } // get shutdown state\n\n\n      let shut_down = localStorage.getItem(\"shut-down\");\n      if (shut_down !== null && shut_down !== undefined && shut_down === \"true\") this.shutDown();else {\n        // Get previous lock screen state\n        let screen_locked = localStorage.getItem(\"screen-locked\");\n\n        if (screen_locked !== null && screen_locked !== undefined) {\n          this.setState({\n            screen_locked: screen_locked === \"true\" ? true : false\n          });\n        }\n      }\n    };\n\n    this.lockScreen = () => {\n      // google analytics\n      ReactGA.pageview('/lock-screen');\n      ReactGA.event({\n        category: `Screen Change`,\n        action: `Set Screen to Locked`\n      });\n      document.getElementById(\"status-bar\").blur();\n      setTimeout(() => {\n        this.setState({\n          screen_locked: true\n        });\n      }, 100); // waiting for all windows to close (transition-duration)\n\n      localStorage.setItem(\"screen-locked\", true);\n    };\n\n    this.unLockScreen = () => {\n      ReactGA.pageview('/desktop');\n      window.removeEventListener('click', this.unLockScreen);\n      window.removeEventListener('keypress', this.unLockScreen);\n      this.setState({\n        screen_locked: false\n      });\n      localStorage.setItem(\"screen-locked\", false);\n    };\n\n    this.changeBackgroundImage = img_name => {\n      this.setState({\n        bg_image_name: img_name\n      });\n      localStorage.setItem(\"bg-image\", img_name);\n    };\n\n    this.shutDown = () => {\n      ReactGA.pageview('/switch-off');\n      ReactGA.event({\n        category: `Screen Change`,\n        action: `Switched off the Ubuntu`\n      });\n      document.getElementById(\"status-bar\").blur();\n      this.setState({\n        shutDownScreen: true\n      });\n      localStorage.setItem(\"shut-down\", true);\n    };\n\n    this.turnOn = () => {\n      ReactGA.pageview('/desktop');\n      this.setState({\n        shutDownScreen: false,\n        booting_screen: true\n      });\n      this.setTimeOutBootScreen();\n      localStorage.setItem(\"shut-down\", false);\n    };\n\n    this.state = {\n      screen_locked: false,\n      bg_image_name: \"wall-2\",\n      booting_screen: true,\n      shutDownScreen: false\n    };\n  }\n\n  componentDidMount() {\n    this.getLocalData();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-screen h-screen overflow-hidden\",\n      children: [/*#__PURE__*/_jsxDEV(LockScreen, {\n        isLocked: this.state.screen_locked,\n        bgImgName: this.state.bg_image_name,\n        unLockScreen: this.unLockScreen\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BootingScreen, {\n        visible: this.state.booting_screen,\n        isShutDown: this.state.shutDownScreen,\n        turnOn: this.turnOn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Navbar, {\n        lockScreen: this.lockScreen,\n        shutDown: this.shutDown\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Desktop, {\n        bg_image_name: this.state.bg_image_name,\n        changeBackgroundImage: this.changeBackgroundImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/91809/Desktop/vivek9patel.github.io-master/vivek9patel.github.io-master/src/components/ubuntu.js"],"names":["React","Component","BootingScreen","Desktop","LockScreen","Navbar","ReactGA","Ubuntu","constructor","setTimeOutBootScreen","setTimeout","setState","booting_screen","getLocalData","bg_image_name","localStorage","getItem","undefined","setItem","shut_down","shutDown","screen_locked","lockScreen","pageview","event","category","action","document","getElementById","blur","unLockScreen","window","removeEventListener","changeBackgroundImage","img_name","shutDownScreen","turnOn","state","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport BootingScreen from \"./screen/booting_screen\";\nimport Desktop from \"./screen/desktop\";\nimport LockScreen from \"./screen/lock_screen\";\nimport Navbar from \"./screen/navbar\";\nimport ReactGA from 'react-ga';\n\nexport default class Ubuntu extends Component {\n  constructor() {\n    super();\n    this.state = {\n      screen_locked: false,\n      bg_image_name: \"wall-2\",\n      booting_screen: true,\n      shutDownScreen: false,\n    }\n  }\n\n  componentDidMount() {\n    this.getLocalData();\n  }\n\n  setTimeOutBootScreen = () => {\n    setTimeout(() => {\n      this.setState({ booting_screen: false });\n    }, 2000);\n  }\n\n  getLocalData = () => {\n    // Get Previously selected Background Image\n    let bg_image_name = localStorage.getItem(\"bg-image\");\n    if (bg_image_name !== null && bg_image_name !== undefined) {\n      this.setState({ bg_image_name });\n    }\n\n    let booting_screen = localStorage.getItem(\"booting_screen\");\n    if (booting_screen !== null && booting_screen !== undefined) {\n      // user has visited site before\n      this.setState({ booting_screen: false });\n    }\n    else {\n      // user is visiting site for the first time\n      localStorage.setItem(\"booting_screen\", false);\n      this.setTimeOutBootScreen();\n    }\n\n    // get shutdown state\n    let shut_down = localStorage.getItem(\"shut-down\");\n    if (shut_down !== null && shut_down !== undefined && shut_down === \"true\") this.shutDown();\n    else {\n      // Get previous lock screen state\n      let screen_locked = localStorage.getItem(\"screen-locked\");\n      if (screen_locked !== null && screen_locked !== undefined) {\n        this.setState({ screen_locked: (screen_locked === \"true\" ? true : false) });\n      }\n    }\n  }\n\n  lockScreen = () => {\n    // google analytics\n    ReactGA.pageview('/lock-screen');\n    ReactGA.event({\n      category: `Screen Change`,\n      action: `Set Screen to Locked`\n    });\n\n    document.getElementById(\"status-bar\").blur();\n    setTimeout(() => {\n      this.setState({ screen_locked: true });\n    }, 100); // waiting for all windows to close (transition-duration)\n    localStorage.setItem(\"screen-locked\", true);\n  }\n\n  unLockScreen = () => {\n\n    ReactGA.pageview('/desktop');\n\n    window.removeEventListener('click', this.unLockScreen);\n    window.removeEventListener('keypress', this.unLockScreen);\n\n    this.setState({ screen_locked: false });\n    localStorage.setItem(\"screen-locked\", false);\n  }\n\n  changeBackgroundImage = (img_name) => {\n    this.setState({ bg_image_name: img_name });\n    localStorage.setItem(\"bg-image\", img_name);\n  }\n\n  shutDown = () => {\n\n    ReactGA.pageview('/switch-off');\n    ReactGA.event({\n      category: `Screen Change`,\n      action: `Switched off the Ubuntu`\n    });\n\n    document.getElementById(\"status-bar\").blur();\n    this.setState({ shutDownScreen: true });\n    localStorage.setItem(\"shut-down\", true);\n  }\n\n  turnOn = () => {\n\n    ReactGA.pageview('/desktop');\n\n    this.setState({ shutDownScreen: false, booting_screen: true });\n    this.setTimeOutBootScreen();\n    localStorage.setItem(\"shut-down\", false);\n  }\n\n  render() {\n    return (\n      <div className=\"w-screen h-screen overflow-hidden\">\n        <LockScreen isLocked={this.state.screen_locked} bgImgName={this.state.bg_image_name} unLockScreen={this.unLockScreen} />\n        <BootingScreen visible={this.state.booting_screen} isShutDown={this.state.shutDownScreen} turnOn={this.turnOn} />\n        <Navbar lockScreen={this.lockScreen} shutDown={this.shutDown} />\n        <Desktop bg_image_name={this.state.bg_image_name} changeBackgroundImage={this.changeBackgroundImage} />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}