{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91809\\\\Desktop\\\\vivek9patel.github.io-master\\\\vivek9patel.github.io-master\\\\src\\\\components\\\\screen\\\\desktop.js\";\nimport React, { Component } from 'react';\nimport BackgroundImage from '../util components/background-image';\nimport SideBar from './side_bar';\nimport apps from '../../apps.config';\nimport Window from '../base/window';\nimport UbuntuApp from '../base/ubuntu_app';\nimport DesktopMenu from '../context menus/desktop-menu';\nimport DefaultMenu from '../context menus/default';\nimport $ from 'jquery';\nimport ReactGA from 'react-ga';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class Desktop extends Component {\n  constructor() {\n    super();\n\n    this.checkForNewFolders = () => {\n      var new_folders = localStorage.getItem('new_folders');\n\n      if (new_folders === null && new_folders !== undefined) {\n        localStorage.setItem(\"new_folders\", JSON.stringify([]));\n      } else {\n        new_folders = JSON.parse(new_folders);\n        new_folders.forEach(folder => {\n          apps.push({\n            id: `new-folder-${folder.id}`,\n            title: folder.name,\n            icon: './themes/Yaru/system/folder.png',\n            disabled: true,\n            favourite: false,\n            desktop_shortcut: true,\n            screen: () => {}\n          });\n        });\n        this.updateAppsData();\n      }\n    };\n\n    this.setEventListeners = () => {\n      document.getElementById(\"open-settings\").addEventListener(\"click\", () => {\n        this.openApp(\"settings\");\n      });\n    };\n\n    this.setContextListeners = () => {\n      document.addEventListener('contextmenu', this.checkContextMenu); // on click, anywhere, hide all menus\n\n      document.addEventListener('click', this.hideAllContextMenu);\n    };\n\n    this.removeContextListeners = () => {\n      document.removeEventListener(\"contextmenu\", this.checkContextMenu);\n      document.removeEventListener(\"click\", this.hideAllContextMenu);\n    };\n\n    this.checkContextMenu = e => {\n      e.preventDefault();\n      this.hideAllContextMenu();\n\n      switch (e.target.dataset.context) {\n        case \"desktop-area\":\n          ReactGA.event({\n            category: `Context Menu`,\n            action: `Opened Desktop Context Menu`\n          });\n          this.showContextMenu(e, \"desktop\");\n          break;\n\n        default:\n          ReactGA.event({\n            category: `Context Menu`,\n            action: `Opened Default Context Menu`\n          });\n          this.showContextMenu(e, \"default\");\n      }\n    };\n\n    this.showContextMenu = (e, menuName\n    /* context menu name */\n    ) => {\n      let {\n        posx,\n        posy\n      } = this.getMenuPosition(e);\n      let contextMenu = document.getElementById(`${menuName}-menu`);\n      if (posx + $(contextMenu).width() > window.innerWidth) posx -= $(contextMenu).width();\n      if (posy + $(contextMenu).height() > window.innerHeight) posy -= $(contextMenu).height();\n      posx = posx.toString() + \"px\";\n      posy = posy.toString() + \"px\";\n      contextMenu.style.left = posx;\n      contextMenu.style.top = posy;\n      this.setState({\n        context_menus: { ...this.state.context_menus,\n          [menuName]: true\n        }\n      });\n    };\n\n    this.hideAllContextMenu = () => {\n      let menus = this.state.context_menus;\n      Object.keys(menus).forEach(key => {\n        menus[key] = false;\n      });\n      this.setState({\n        context_menus: menus\n      });\n    };\n\n    this.getMenuPosition = e => {\n      var posx = 0;\n      var posy = 0;\n      if (!e) e = window.event;\n\n      if (e.pageX || e.pageY) {\n        posx = e.pageX;\n        posy = e.pageY;\n      } else if (e.clientX || e.clientY) {\n        posx = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\n        posy = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;\n      }\n\n      return {\n        posx,\n        posy\n      };\n    };\n\n    this.fetchAppsData = () => {\n      let focused_windows = {},\n          closed_windows = {},\n          disabled_apps = {},\n          favourite_apps = {},\n          overlapped_windows = {},\n          minimized_windows = {};\n      let desktop_apps = [];\n      apps.forEach(app => {\n        focused_windows = { ...focused_windows,\n          [app.id]: false\n        };\n        closed_windows = { ...closed_windows,\n          [app.id]: true\n        };\n        disabled_apps = { ...disabled_apps,\n          [app.id]: app.disabled\n        };\n        favourite_apps = { ...favourite_apps,\n          [app.id]: app.favourite\n        };\n        overlapped_windows = { ...overlapped_windows,\n          [app.id]: false\n        };\n        minimized_windows = { ...minimized_windows,\n          [app.id]: false\n        };\n        if (app.desktop_shortcut) desktop_apps.push(app.id);\n      });\n      this.setState({\n        focused_windows,\n        closed_windows,\n        disabled_apps,\n        favourite_apps,\n        overlapped_windows,\n        minimized_windows,\n        desktop_apps\n      });\n      this.initFavourite = { ...favourite_apps\n      };\n    };\n\n    this.updateAppsData = () => {\n      let focused_windows = {},\n          closed_windows = {},\n          favourite_apps = {},\n          minimized_windows = {},\n          disabled_apps = {};\n      let desktop_apps = [];\n      apps.forEach(app => {\n        focused_windows = { ...focused_windows,\n          [app.id]: this.state.focused_windows[app.id] !== undefined || this.state.focused_windows[app.id] !== null ? this.state.focused_windows[app.id] : false\n        };\n        minimized_windows = { ...minimized_windows,\n          [app.id]: this.state.minimized_windows[app.id] !== undefined || this.state.minimized_windows[app.id] !== null ? this.state.minimized_windows[app.id] : false\n        };\n        disabled_apps = { ...disabled_apps,\n          [app.id]: app.disabled\n        };\n        closed_windows = { ...closed_windows,\n          [app.id]: this.state.closed_windows[app.id] !== undefined || this.state.closed_windows[app.id] !== null ? this.state.closed_windows[app.id] : true\n        };\n        favourite_apps = { ...favourite_apps,\n          [app.id]: app.favourite\n        };\n        if (app.desktop_shortcut) desktop_apps.push(app.id);\n      });\n      this.setState({\n        focused_windows,\n        closed_windows,\n        disabled_apps,\n        minimized_windows,\n        favourite_apps,\n        desktop_apps\n      });\n      this.initFavourite = { ...favourite_apps\n      };\n    };\n\n    this.renderDesktopApps = () => {\n      if (Object.keys(this.state.closed_windows).length === 0) return;\n      let appsJsx = [];\n      apps.forEach((app, index) => {\n        if (this.state.desktop_apps.includes(app.id)) {\n          const props = {\n            name: app.title,\n            id: app.id,\n            icon: app.icon,\n            openApp: this.openApp\n          };\n          appsJsx.push( /*#__PURE__*/_jsxDEV(UbuntuApp, { ...props\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 21\n          }, this));\n        }\n      });\n      return appsJsx;\n    };\n\n    this.renderWindows = () => {\n      let windowsJsx = [];\n      apps.forEach((app, index) => {\n        if (this.state.closed_windows[app.id] === false) {\n          const props = {\n            title: app.title,\n            id: app.id,\n            screen: app.screen,\n            closed: this.closeApp,\n            focus: this.focus,\n            isFocused: this.state.focused_windows[app.id],\n            hideSideBar: this.hideSideBar,\n            hasMinimised: this.hasMinimised,\n            minimized: this.state.minimized_windows[app.id],\n            changeBackgroundImage: this.props.changeBackgroundImage,\n            bg_image_name: this.props.bg_image_name\n          };\n          windowsJsx.push( /*#__PURE__*/_jsxDEV(Window, { ...props\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 21\n          }, this));\n        }\n      });\n      return windowsJsx;\n    };\n\n    this.hideSideBar = (objId, hide) => {\n      if (hide === this.state.hideSideBar) return;\n\n      if (objId === null) {\n        if (hide === false) {\n          this.setState({\n            hideSideBar: false\n          });\n        } else {\n          for (const key in this.state.overlapped_windows) {\n            if (this.state.overlapped_windows[key]) {\n              this.setState({\n                hideSideBar: true\n              });\n              return;\n            } // if any window is overlapped then hide the SideBar\n\n          }\n        }\n\n        return;\n      }\n\n      if (hide === false) {\n        for (const key in this.state.overlapped_windows) {\n          if (this.state.overlapped_windows[key] && key !== objId) return; // if any window is overlapped then don't show the SideBar\n        }\n      }\n\n      let overlapped_windows = this.state.overlapped_windows;\n      overlapped_windows[objId] = hide;\n      this.setState({\n        hideSideBar: hide,\n        overlapped_windows\n      });\n    };\n\n    this.hasMinimised = objId => {\n      let minimized_windows = this.state.minimized_windows;\n      var focused_windows = this.state.focused_windows; // remove focus and minimise this window\n\n      minimized_windows[objId] = true;\n      focused_windows[objId] = false;\n      this.setState({\n        minimized_windows,\n        focused_windows\n      });\n      this.hideSideBar(null, false);\n      this.giveFocusToLastApp();\n    };\n\n    this.giveFocusToLastApp = () => {\n      // if there is atleast one app opened, give it focus\n      if (!this.checkAllMinimised()) {\n        for (const index in this.app_stack) {\n          if (!this.state.minimized_windows[this.app_stack[index]]) {\n            this.focus(this.app_stack[index]);\n            break;\n          }\n        }\n      }\n    };\n\n    this.checkAllMinimised = () => {\n      let result = true;\n\n      for (const key in this.state.minimized_windows) {\n        if (!this.state.closed_windows[key]) {\n          // if app is opened\n          result = result & this.state.minimized_windows[key];\n        }\n      }\n\n      return result;\n    };\n\n    this.openApp = objId => {\n      // google analytics\n      ReactGA.event({\n        category: `Open App`,\n        action: `Opened ${objId} window`\n      }); // if the app is disabled\n\n      if (this.state.disabled_apps[objId]) return;\n\n      if (this.state.minimized_windows[objId]) {\n        // focus this app's window\n        this.focus(objId); // set window's last position\n\n        var r = document.querySelector(\"#\" + objId);\n        r.style.transform = `translate(${r.style.getPropertyValue(\"--window-transform-x\")},${r.style.getPropertyValue(\"--window-transform-y\")}) scale(1)`; // tell childs that his app has been not minimised\n\n        let minimized_windows = this.state.minimized_windows;\n        minimized_windows[objId] = false;\n        this.setState({\n          minimized_windows: minimized_windows\n        });\n        return;\n      } //if app is already opened\n\n\n      if (this.app_stack.includes(objId)) this.focus(objId);else {\n        let closed_windows = this.state.closed_windows;\n        let favourite_apps = this.state.favourite_apps;\n        setTimeout(() => {\n          favourite_apps[objId] = true; // adds opened app to sideBar\n\n          closed_windows[objId] = false; // openes app's window\n\n          this.setState({\n            closed_windows,\n            favourite_apps\n          }, this.focus(objId));\n          this.app_stack.push(objId);\n        }, 200);\n      }\n    };\n\n    this.closeApp = objId => {\n      // remove app from the app stack\n      this.app_stack.splice(this.app_stack.indexOf(objId), 1);\n      this.giveFocusToLastApp();\n      this.hideSideBar(null, false); // close window\n\n      let closed_windows = this.state.closed_windows;\n      let favourite_apps = this.state.favourite_apps;\n      if (this.initFavourite[objId] === false) favourite_apps[objId] = false; // if user default app is not favourite, remove from sidebar\n\n      closed_windows[objId] = true; // closes the app's window\n\n      this.setState({\n        closed_windows,\n        favourite_apps\n      });\n    };\n\n    this.focus = objId => {\n      // removes focus from all window and \n      // gives focus to window with 'id = objId'\n      var focused_windows = this.state.focused_windows;\n      focused_windows[objId] = true;\n\n      for (let key in focused_windows) {\n        if (focused_windows.hasOwnProperty(key)) {\n          if (key !== objId) {\n            focused_windows[key] = false;\n          }\n        }\n      }\n\n      this.setState({\n        focused_windows\n      });\n    };\n\n    this.addNewFolder = () => {\n      this.setState({\n        showNameBar: true\n      });\n    };\n\n    this.renderNameBar = () => {\n      let addFolder = () => {\n        let folder_name = document.getElementById(\"folder-name-input\").value;\n        folder_name = folder_name.trim();\n        let folder_id = folder_name.replace(/\\s+/g, '-').toLowerCase();\n        apps.push({\n          id: `new-folder-${folder_id}`,\n          title: folder_name,\n          icon: './themes/Yaru/system/folder.png',\n          disabled: true,\n          favourite: false,\n          desktop_shortcut: true,\n          screen: () => {}\n        }); // store in local storage\n\n        var new_folders = JSON.parse(localStorage.getItem('new_folders'));\n        new_folders.push({\n          id: `new-folder-${folder_id}`,\n          name: folder_name\n        });\n        localStorage.setItem(\"new_folders\", JSON.stringify(new_folders));\n        this.setState({\n          showNameBar: false\n        }, this.updateAppsData);\n      };\n\n      let removeCard = () => {\n        this.setState({\n          showNameBar: false\n        });\n      };\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute rounded-md top-1/2 left-1/2 text-center text-white font-light text-sm bg-ub-cool-grey transform -translate-y-1/2 -translate-x-1/2 sm:w-96 w-3/4 z-50\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-full flex flex-col justify-around items-start pl-6 pb-8 pt-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"New folder name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"outline-none mt-5 px-1 w-10/12  context-menu-bg border-2 border-yellow-700 rounded py-0.5\",\n            id: \"folder-name-input\",\n            type: \"text\",\n            autoComplete: \"off\",\n            spellCheck: \"false\",\n            autoFocus: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: addFolder,\n            className: \"w-1/2 px-4 py-2 border border-gray-900 border-opacity-50 border-r-0 hover:bg-ub-warm-grey hover:bg-opacity-10 hover:border-opacity-50\",\n            children: \"Create\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 455,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: removeCard,\n            className: \"w-1/2 px-4 py-2 border border-gray-900 border-opacity-50 hover:bg-ub-warm-grey hover:bg-opacity-10 hover:border-opacity-50\",\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 456,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 454,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 13\n      }, this);\n    };\n\n    this.app_stack = [];\n    this.initFavourite = {};\n    this.allWindowClosed = false;\n    this.state = {\n      focused_windows: {},\n      closed_windows: {},\n      overlapped_windows: {},\n      disabled_apps: {},\n      favourite_apps: {},\n      hideSideBar: false,\n      minimized_windows: {},\n      desktop_apps: [],\n      context_menus: {\n        desktop: false,\n        default: false\n      },\n      showNameBar: false\n    };\n  }\n\n  componentDidMount() {\n    // google analytics\n    ReactGA.pageview(\"/desktop\");\n    this.fetchAppsData();\n    this.setContextListeners();\n    this.setEventListeners();\n    this.checkForNewFolders();\n  }\n\n  componentWillUnmount() {\n    this.removeContextListeners();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \" h-full w-full flex flex-col items-end justify-start content-start flex-wrap-reverse pt-8 bg-transparent relative overflow-hidden overscroll-none window-parent\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute h-full w-full bg-transparent\",\n        \"data-context\": \"desktop-area\",\n        children: this.renderWindows()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(BackgroundImage, {\n        img: this.props.bg_image_name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SideBar, {\n        apps: apps,\n        hide: this.state.hideSideBar,\n        hideSideBar: this.hideSideBar,\n        favourite_apps: this.state.favourite_apps,\n        closed_windows: this.state.closed_windows,\n        focused_windows: this.state.focused_windows,\n        isMinimized: this.state.minimized_windows,\n        openAppByAppId: this.openApp\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 17\n      }, this), this.renderDesktopApps(), /*#__PURE__*/_jsxDEV(DesktopMenu, {\n        active: this.state.context_menus.desktop,\n        openApp: this.openApp,\n        addNewFolder: this.addNewFolder\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DefaultMenu, {\n        active: this.state.context_menus.default\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 17\n      }, this), this.state.showNameBar ? this.renderNameBar() : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nexport default Desktop;","map":{"version":3,"sources":["C:/Users/91809/Desktop/vivek9patel.github.io-master/vivek9patel.github.io-master/src/components/screen/desktop.js"],"names":["React","Component","BackgroundImage","SideBar","apps","Window","UbuntuApp","DesktopMenu","DefaultMenu","$","ReactGA","Desktop","constructor","checkForNewFolders","new_folders","localStorage","getItem","undefined","setItem","JSON","stringify","parse","forEach","folder","push","id","title","name","icon","disabled","favourite","desktop_shortcut","screen","updateAppsData","setEventListeners","document","getElementById","addEventListener","openApp","setContextListeners","checkContextMenu","hideAllContextMenu","removeContextListeners","removeEventListener","e","preventDefault","target","dataset","context","event","category","action","showContextMenu","menuName","posx","posy","getMenuPosition","contextMenu","width","window","innerWidth","height","innerHeight","toString","style","left","top","setState","context_menus","state","menus","Object","keys","key","pageX","pageY","clientX","clientY","body","scrollLeft","documentElement","scrollTop","fetchAppsData","focused_windows","closed_windows","disabled_apps","favourite_apps","overlapped_windows","minimized_windows","desktop_apps","app","initFavourite","renderDesktopApps","length","appsJsx","index","includes","props","renderWindows","windowsJsx","closed","closeApp","focus","isFocused","hideSideBar","hasMinimised","minimized","changeBackgroundImage","bg_image_name","objId","hide","giveFocusToLastApp","checkAllMinimised","app_stack","result","r","querySelector","transform","getPropertyValue","setTimeout","splice","indexOf","hasOwnProperty","addNewFolder","showNameBar","renderNameBar","addFolder","folder_name","value","trim","folder_id","replace","toLowerCase","removeCard","allWindowClosed","desktop","default","componentDidMount","pageview","componentWillUnmount","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport BackgroundImage from '../util components/background-image';\nimport SideBar from './side_bar';\nimport apps from '../../apps.config';\nimport Window from '../base/window';\nimport UbuntuApp from '../base/ubuntu_app';\nimport DesktopMenu from '../context menus/desktop-menu';\nimport DefaultMenu from '../context menus/default';\nimport $ from 'jquery';\nimport ReactGA from 'react-ga';\n\nexport class Desktop extends Component {\n    constructor() {\n        super();\n        this.app_stack = [];\n        this.initFavourite = {};\n        this.allWindowClosed = false;\n        this.state = {\n            focused_windows: {},\n            closed_windows: {},\n            overlapped_windows: {},\n            disabled_apps: {},\n            favourite_apps: {},\n            hideSideBar: false,\n            minimized_windows: {},\n            desktop_apps: [],\n            context_menus: {\n                desktop: false,\n                default: false,\n            },\n            showNameBar: false,\n        }\n    }\n\n    componentDidMount() {\n        // google analytics\n        ReactGA.pageview(\"/desktop\");\n\n        this.fetchAppsData();\n        this.setContextListeners();\n        this.setEventListeners();\n        this.checkForNewFolders();\n    }\n\n    componentWillUnmount() {\n        this.removeContextListeners();\n    }\n\n    checkForNewFolders = () => {\n        var new_folders = localStorage.getItem('new_folders');\n        if (new_folders === null && new_folders !== undefined) {\n            localStorage.setItem(\"new_folders\", JSON.stringify([]));\n        }\n        else {\n            new_folders = JSON.parse(new_folders);\n            new_folders.forEach(folder => {\n                apps.push({\n                    id: `new-folder-${folder.id}`,\n                    title: folder.name,\n                    icon: './themes/Yaru/system/folder.png',\n                    disabled: true,\n                    favourite: false,\n                    desktop_shortcut: true,\n                    screen: () => { },\n                });\n            });\n            this.updateAppsData();\n        }\n    }\n\n    setEventListeners = () => {\n        document.getElementById(\"open-settings\").addEventListener(\"click\", () => {\n            this.openApp(\"settings\");\n        });\n    }\n\n    setContextListeners = () => {\n        document.addEventListener('contextmenu', this.checkContextMenu);\n        // on click, anywhere, hide all menus\n        document.addEventListener('click', this.hideAllContextMenu);\n    }\n\n    removeContextListeners = () => {\n        document.removeEventListener(\"contextmenu\", this.checkContextMenu);\n        document.removeEventListener(\"click\", this.hideAllContextMenu);\n    }\n\n    checkContextMenu = (e) => {\n        e.preventDefault();\n        this.hideAllContextMenu();\n        switch (e.target.dataset.context) {\n            case \"desktop-area\":\n                ReactGA.event({\n                    category: `Context Menu`,\n                    action: `Opened Desktop Context Menu`\n                });\n                this.showContextMenu(e, \"desktop\");\n                break;\n            default:\n                ReactGA.event({\n                    category: `Context Menu`,\n                    action: `Opened Default Context Menu`\n                });\n                this.showContextMenu(e, \"default\");\n        }\n    }\n\n    showContextMenu = (e, menuName /* context menu name */) => {\n        let { posx, posy } = this.getMenuPosition(e);\n        let contextMenu = document.getElementById(`${menuName}-menu`);\n\n        if (posx + $(contextMenu).width() > window.innerWidth) posx -= $(contextMenu).width();\n        if (posy + $(contextMenu).height() > window.innerHeight) posy -= $(contextMenu).height();\n\n        posx = posx.toString() + \"px\";\n        posy = posy.toString() + \"px\";\n\n        contextMenu.style.left = posx;\n        contextMenu.style.top = posy;\n\n        this.setState({ context_menus: { ...this.state.context_menus, [menuName]: true } });\n    }\n\n    hideAllContextMenu = () => {\n        let menus = this.state.context_menus;\n        Object.keys(menus).forEach(key => {\n            menus[key] = false;\n        });\n        this.setState({ context_menus: menus });\n    }\n\n    getMenuPosition = (e) => {\n        var posx = 0;\n        var posy = 0;\n\n        if (!e) e = window.event;\n\n        if (e.pageX || e.pageY) {\n            posx = e.pageX;\n            posy = e.pageY;\n        } else if (e.clientX || e.clientY) {\n            posx = e.clientX + document.body.scrollLeft +\n                document.documentElement.scrollLeft;\n            posy = e.clientY + document.body.scrollTop +\n                document.documentElement.scrollTop;\n        }\n        return {\n            posx, posy\n        }\n    }\n\n    fetchAppsData = () => {\n        let focused_windows = {}, closed_windows = {}, disabled_apps = {}, favourite_apps = {}, overlapped_windows = {}, minimized_windows = {};\n        let desktop_apps = [];\n        apps.forEach((app) => {\n            focused_windows = {\n                ...focused_windows,\n                [app.id]: false,\n            };\n            closed_windows = {\n                ...closed_windows,\n                [app.id]: true,\n            };\n            disabled_apps = {\n                ...disabled_apps,\n                [app.id]: app.disabled,\n            };\n            favourite_apps = {\n                ...favourite_apps,\n                [app.id]: app.favourite,\n            };\n            overlapped_windows = {\n                ...overlapped_windows,\n                [app.id]: false,\n            };\n            minimized_windows = {\n                ...minimized_windows,\n                [app.id]: false,\n            }\n            if (app.desktop_shortcut) desktop_apps.push(app.id);\n        });\n        this.setState({\n            focused_windows,\n            closed_windows,\n            disabled_apps,\n            favourite_apps,\n            overlapped_windows,\n            minimized_windows,\n            desktop_apps\n        });\n        this.initFavourite = { ...favourite_apps };\n    }\n\n    updateAppsData = () => {\n        let focused_windows = {}, closed_windows = {}, favourite_apps = {}, minimized_windows = {}, disabled_apps = {};\n        let desktop_apps = [];\n        apps.forEach((app) => {\n            focused_windows = {\n                ...focused_windows,\n                [app.id]: ((this.state.focused_windows[app.id] !== undefined || this.state.focused_windows[app.id] !== null) ? this.state.focused_windows[app.id] : false),\n            };\n            minimized_windows = {\n                ...minimized_windows,\n                [app.id]: ((this.state.minimized_windows[app.id] !== undefined || this.state.minimized_windows[app.id] !== null) ? this.state.minimized_windows[app.id] : false)\n            };\n            disabled_apps = {\n                ...disabled_apps,\n                [app.id]: app.disabled\n            };\n            closed_windows = {\n                ...closed_windows,\n                [app.id]: ((this.state.closed_windows[app.id] !== undefined || this.state.closed_windows[app.id] !== null) ? this.state.closed_windows[app.id] : true)\n            };\n            favourite_apps = {\n                ...favourite_apps,\n                [app.id]: app.favourite\n            }\n            if (app.desktop_shortcut) desktop_apps.push(app.id);\n        });\n        this.setState({\n            focused_windows,\n            closed_windows,\n            disabled_apps,\n            minimized_windows,\n            favourite_apps,\n            desktop_apps\n        });\n        this.initFavourite = { ...favourite_apps };\n    }\n\n    renderDesktopApps = () => {\n        if (Object.keys(this.state.closed_windows).length === 0) return;\n        let appsJsx = [];\n        apps.forEach((app, index) => {\n            if (this.state.desktop_apps.includes(app.id)) {\n\n                const props = {\n                    name: app.title,\n                    id: app.id,\n                    icon: app.icon,\n                    openApp: this.openApp\n                }\n\n                appsJsx.push(\n                    <UbuntuApp key={index} {...props} />\n                );\n            }\n        });\n        return appsJsx;\n    }\n\n    renderWindows = () => {\n        let windowsJsx = [];\n        apps.forEach((app, index) => {\n            if (this.state.closed_windows[app.id] === false) {\n\n                const props = {\n                    title: app.title,\n                    id: app.id,\n                    screen: app.screen,\n                    closed: this.closeApp,\n                    focus: this.focus,\n                    isFocused: this.state.focused_windows[app.id],\n                    hideSideBar: this.hideSideBar,\n                    hasMinimised: this.hasMinimised,\n                    minimized: this.state.minimized_windows[app.id],\n                    changeBackgroundImage: this.props.changeBackgroundImage,\n                    bg_image_name: this.props.bg_image_name,\n                }\n\n                windowsJsx.push(\n                    <Window key={index} {...props} />\n                )\n            }\n        });\n        return windowsJsx;\n    }\n\n    hideSideBar = (objId, hide) => {\n        if (hide === this.state.hideSideBar) return;\n\n        if (objId === null) {\n            if (hide === false) {\n                this.setState({ hideSideBar: false });\n            }\n            else {\n                for (const key in this.state.overlapped_windows) {\n                    if (this.state.overlapped_windows[key]) {\n                        this.setState({ hideSideBar: true });\n                        return;\n                    }  // if any window is overlapped then hide the SideBar\n                }\n            }\n            return;\n        }\n\n        if (hide === false) {\n            for (const key in this.state.overlapped_windows) {\n                if (this.state.overlapped_windows[key] && key !== objId) return; // if any window is overlapped then don't show the SideBar\n            }\n        }\n\n        let overlapped_windows = this.state.overlapped_windows;\n        overlapped_windows[objId] = hide;\n        this.setState({ hideSideBar: hide, overlapped_windows });\n    }\n\n    hasMinimised = (objId) => {\n        let minimized_windows = this.state.minimized_windows;\n        var focused_windows = this.state.focused_windows;\n\n        // remove focus and minimise this window\n        minimized_windows[objId] = true;\n        focused_windows[objId] = false;\n        this.setState({ minimized_windows, focused_windows });\n\n        this.hideSideBar(null, false);\n\n        this.giveFocusToLastApp();\n    }\n\n    giveFocusToLastApp = () => {\n        // if there is atleast one app opened, give it focus\n        if (!this.checkAllMinimised()) {\n            for (const index in this.app_stack) {\n                if (!this.state.minimized_windows[this.app_stack[index]]) {\n                    this.focus(this.app_stack[index]);\n                    break;\n                }\n            }\n        }\n    }\n\n    checkAllMinimised = () => {\n        let result = true;\n        for (const key in this.state.minimized_windows) {\n            if (!this.state.closed_windows[key]) { // if app is opened\n                result = result & this.state.minimized_windows[key];\n            }\n        }\n        return result;\n    }\n\n    openApp = (objId) => {\n\n        // google analytics\n        ReactGA.event({\n            category: `Open App`,\n            action: `Opened ${objId} window`\n        });\n\n        // if the app is disabled\n        if (this.state.disabled_apps[objId]) return;\n\n        if (this.state.minimized_windows[objId]) {\n            // focus this app's window\n            this.focus(objId);\n\n            // set window's last position\n            var r = document.querySelector(\"#\" + objId);\n            r.style.transform = `translate(${r.style.getPropertyValue(\"--window-transform-x\")},${r.style.getPropertyValue(\"--window-transform-y\")}) scale(1)`;\n\n            // tell childs that his app has been not minimised\n            let minimized_windows = this.state.minimized_windows;\n            minimized_windows[objId] = false;\n            this.setState({ minimized_windows: minimized_windows });\n            return;\n        }\n\n        //if app is already opened\n        if (this.app_stack.includes(objId)) this.focus(objId);\n        else {\n            let closed_windows = this.state.closed_windows;\n            let favourite_apps = this.state.favourite_apps;\n            setTimeout(() => {\n                favourite_apps[objId] = true; // adds opened app to sideBar\n                closed_windows[objId] = false; // openes app's window\n                this.setState({ closed_windows, favourite_apps }, this.focus(objId));\n                this.app_stack.push(objId);\n            }, 200);\n        }\n    }\n\n    closeApp = (objId) => {\n\n        // remove app from the app stack\n        this.app_stack.splice(this.app_stack.indexOf(objId), 1);\n\n        this.giveFocusToLastApp();\n\n        this.hideSideBar(null, false);\n\n        // close window\n        let closed_windows = this.state.closed_windows;\n        let favourite_apps = this.state.favourite_apps;\n\n        if (this.initFavourite[objId] === false) favourite_apps[objId] = false; // if user default app is not favourite, remove from sidebar\n        closed_windows[objId] = true; // closes the app's window\n\n        this.setState({ closed_windows, favourite_apps });\n    }\n\n    focus = (objId) => {\n        // removes focus from all window and \n        // gives focus to window with 'id = objId'\n        var focused_windows = this.state.focused_windows;\n        focused_windows[objId] = true;\n        for (let key in focused_windows) {\n            if (focused_windows.hasOwnProperty(key)) {\n                if (key !== objId) {\n                    focused_windows[key] = false;\n                }\n            }\n        }\n        this.setState({ focused_windows });\n    }\n\n    addNewFolder = () => {\n        this.setState({ showNameBar: true });\n    }\n\n    renderNameBar = () => {\n        let addFolder = () => {\n            let folder_name = document.getElementById(\"folder-name-input\").value;\n            folder_name = folder_name.trim();\n            let folder_id = folder_name.replace(/\\s+/g, '-').toLowerCase();\n            apps.push({\n                id: `new-folder-${folder_id}`,\n                title: folder_name,\n                icon: './themes/Yaru/system/folder.png',\n                disabled: true,\n                favourite: false,\n                desktop_shortcut: true,\n                screen: () => { },\n            });\n            // store in local storage\n            var new_folders = JSON.parse(localStorage.getItem('new_folders'));\n            new_folders.push({ id: `new-folder-${folder_id}`, name: folder_name });\n            localStorage.setItem(\"new_folders\", JSON.stringify(new_folders));\n\n            this.setState({ showNameBar: false }, this.updateAppsData);\n        }\n\n        let removeCard = () => {\n            this.setState({ showNameBar: false });\n        }\n\n        return (\n            <div className=\"absolute rounded-md top-1/2 left-1/2 text-center text-white font-light text-sm bg-ub-cool-grey transform -translate-y-1/2 -translate-x-1/2 sm:w-96 w-3/4 z-50\">\n                <div className=\"w-full flex flex-col justify-around items-start pl-6 pb-8 pt-6\">\n                    <span>New folder name</span>\n                    <input className=\"outline-none mt-5 px-1 w-10/12  context-menu-bg border-2 border-yellow-700 rounded py-0.5\" id=\"folder-name-input\" type=\"text\" autoComplete=\"off\" spellCheck=\"false\" autoFocus={true} />\n                </div>\n                <div className=\"flex\">\n                    <div onClick={addFolder} className=\"w-1/2 px-4 py-2 border border-gray-900 border-opacity-50 border-r-0 hover:bg-ub-warm-grey hover:bg-opacity-10 hover:border-opacity-50\">Create</div>\n                    <div onClick={removeCard} className=\"w-1/2 px-4 py-2 border border-gray-900 border-opacity-50 hover:bg-ub-warm-grey hover:bg-opacity-10 hover:border-opacity-50\">Cancel</div>\n                </div>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div className={\" h-full w-full flex flex-col items-end justify-start content-start flex-wrap-reverse pt-8 bg-transparent relative overflow-hidden overscroll-none window-parent\"}>\n\n                {/* Window Area */}\n                <div className=\"absolute h-full w-full bg-transparent\" data-context=\"desktop-area\">\n                    {this.renderWindows()}\n                </div>\n\n                {/* Background Image */}\n                <BackgroundImage img={this.props.bg_image_name} />\n\n                {/* Ubuntu Side Menu Bar */}\n                <SideBar apps={apps} hide={this.state.hideSideBar} hideSideBar={this.hideSideBar} favourite_apps={this.state.favourite_apps} closed_windows={this.state.closed_windows} focused_windows={this.state.focused_windows} isMinimized={this.state.minimized_windows} openAppByAppId={this.openApp} />\n\n                {/* Desktop Apps */}\n                {this.renderDesktopApps()}\n\n                {/* Context Menus */}\n                <DesktopMenu active={this.state.context_menus.desktop} openApp={this.openApp} addNewFolder={this.addNewFolder} />\n                <DefaultMenu active={this.state.context_menus.default} />\n\n                {/* Folder Input Name Bar */}\n                {\n                    (this.state.showNameBar\n                        ? this.renderNameBar()\n                        : null\n                    )\n                }\n            </div>\n        )\n    }\n}\n\nexport default Desktop"]},"metadata":{},"sourceType":"module"}